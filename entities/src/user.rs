//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use crate::serialization;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Hash, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(Some(20)))", unique)]
    #[serde(
        serialize_with = "serialization::vec_as_address",
        deserialize_with = "serialization::address_to_vec"
    )]
    pub address: Vec<u8>,
    pub description: Option<String>,
    pub email: Option<String>,
    pub user_tier_id: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::admin::Entity")]
    Admin,
    #[sea_orm(has_many = "super::admin_increase_balance_receipt::Entity")]
    AdminIncreaseBalanceReceipt,
    #[sea_orm(has_one = "super::balance::Entity")]
    Balance,
    #[sea_orm(has_many = "super::increase_on_chain_balance_receipt::Entity")]
    IncreaseOnChainBalanceReceipt,
    #[sea_orm(has_many = "super::login::Entity")]
    Login,
    #[sea_orm(has_many = "super::pending_login::Entity")]
    PendingLogin,
    #[sea_orm(has_one = "super::referee::Entity")]
    Referee,
    #[sea_orm(has_one = "super::referrer::Entity")]
    Referrer,
    #[sea_orm(has_many = "super::rpc_key::Entity")]
    RpcKey,
    #[sea_orm(has_many = "super::secondary_user::Entity")]
    SecondaryUser,
    #[sea_orm(has_many = "super::stripe_increase_balance_receipt::Entity")]
    StripeIncreaseBalanceReceipt,
    #[sea_orm(
        belongs_to = "super::user_tier::Entity",
        from = "Column::UserTierId",
        to = "super::user_tier::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserTier,
}

impl Related<super::admin::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Admin.def()
    }
}

impl Related<super::admin_increase_balance_receipt::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AdminIncreaseBalanceReceipt.def()
    }
}

impl Related<super::balance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Balance.def()
    }
}

impl Related<super::increase_on_chain_balance_receipt::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IncreaseOnChainBalanceReceipt.def()
    }
}

impl Related<super::login::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Login.def()
    }
}

impl Related<super::pending_login::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PendingLogin.def()
    }
}

impl Related<super::referee::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Referee.def()
    }
}

impl Related<super::referrer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Referrer.def()
    }
}

impl Related<super::rpc_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RpcKey.def()
    }
}

impl Related<super::secondary_user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SecondaryUser.def()
    }
}

impl Related<super::stripe_increase_balance_receipt::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StripeIncreaseBalanceReceipt.def()
    }
}

impl Related<super::user_tier::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserTier.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
